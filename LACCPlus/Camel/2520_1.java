//,temp,SjmsProducer.java,263,328,temp,JmsProducer.java,169,258
//,3
public class xxx {
    protected boolean processInOut(final Exchange exchange, final AsyncCallback callback) {
        final org.apache.camel.Message in = exchange.getIn();

        String destinationName = in.getHeader(SjmsConstants.JMS_DESTINATION_NAME, String.class);
        // remove the header so it wont be propagated
        in.removeHeader(SjmsConstants.JMS_DESTINATION_NAME);
        if (destinationName == null) {
            destinationName = endpoint.getDestinationName();
        }

        initReplyManager();

        // the request timeout can be overruled by a header otherwise the endpoint configured value is used
        final long timeout
                = exchange.getIn().getHeader(SjmsConstants.JMS_REQUEST_TIMEOUT, endpoint.getRequestTimeout(), long.class);

        final String originalCorrelationId = in.getHeader("JMSCorrelationID", String.class);

        boolean generateFreshCorrId = ObjectHelper.isEmpty(originalCorrelationId)
                || originalCorrelationId.startsWith(GENERATED_CORRELATION_ID_PREFIX);
        if (generateFreshCorrId) {
            // we append the 'Camel-' prefix to know it was generated by us
            in.setHeader("JMSCorrelationID", GENERATED_CORRELATION_ID_PREFIX + getUuidGenerator().generateUuid());
        }

        MessageCreator messageCreator = new MessageCreator() {
            public Message createMessage(Session session) throws JMSException {
                Message answer = endpoint.getBinding().makeJmsMessage(exchange, in, session, null);

                Destination replyTo;
                String replyToOverride = endpoint.getReplyToOverride();
                if (replyToOverride != null) {
                    replyTo = resolveOrCreateDestination(replyToOverride, session);
                } else {
                    // get the reply to destination to be used from the reply manager
                    replyTo = replyManager.getReplyTo();
                }
                if (replyTo == null) {
                    throw new RuntimeExchangeException("Failed to resolve replyTo destination", exchange);
                }
                JmsMessageHelper.setJMSReplyTo(answer, replyTo);

                String correlationId = determineCorrelationId(answer);
                replyManager.registerReply(replyManager, exchange, callback, originalCorrelationId, correlationId, timeout);

                if (LOG.isDebugEnabled()) {
                    LOG.debug("Using {}: {}, JMSReplyTo destination: {}, with request timeout: {} ms.",
                            "JMSCorrelationID", correlationId, replyTo, timeout);
                }

                LOG.trace("Created javax.jms.Message: {}", answer);
                return answer;
            }
        };

        try {
            doSend(exchange, true, destinationName, messageCreator);
        } catch (Exception e) {
            exchange.setException(e);
            callback.done(true);
            return true;
        }

        // continue routing asynchronously (reply will be processed async when its received)
        return false;
    }

};